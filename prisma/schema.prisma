// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @unique @default(autoincrement())
  email             String            @db.VarChar(100)
  nickName          String            @db.VarChar(100)
  profileImageUrl   String
  socialId          String            @db.VarChar(100)
  phoneNumber       String?           @db.VarChar(100)
  accountNumber     String?           @db.VarChar(100)
  dealCount         Int               @default(0)
  saleCount         Int               @default(0)
  saleMoney         Int               @default(0)
  purchaseCount     Int               @default(0)
  purchaseMoney     Int               @default(0)
  openChatUrl       String?           @db.VarChar(100)
  twitterMessageUrl String?           @db.VarChar(100)
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  notifications     Notification[]
  shippingInfo      ShippingInfo?
  salesPosts        SalesPost[]
  purchaseSuggests  PurchaseSuggest[]
}

model Notification {
  id        Int      @id @unique @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model ShippingInfo {
  id           Int      @id @unique @default(autoincrement())
  receiverName String?  @db.VarChar(100)
  address      String?  @db.VarChar(100)
  cuStoreName  String?  @db.VarChar(100)
  gsStoreName  String?  @db.VarChar(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
}

model SalesPost {
  id                Int               @id @unique @default(autoincrement())
  mainImageUrl      String
  productCount      Int
  salesOption       String?           @db.VarChar(100)
  priceOption       String            @db.VarChar(100)
  price             Int
  certificationWord String            @db.VarChar(100)
  description       String
  status            Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  sellor            User              @relation(fields: [sellorId], references: [id])
  sellorId          Int
  certifications    Certification[]
  purchaseSuggests  PurchaseSuggest[]
  ShippingOptions   ShippingOption[]
}

model Certification {
  id          Int       @id @unique @default(autoincrement())
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  salespost   SalesPost @relation(fields: [salesPostId], references: [id])
  salesPostId Int
}

model ShippingOption {
  id               Int               @id @unique @default(autoincrement())
  name             String            @unique @db.VarChar(100)
  price            Int
  purchaseSuggests PurchaseSuggest[]
  salesPosts       SalesPost[]
}

model PurchaseSuggest {
  id               Int            @id @unique @default(autoincrement())
  imageUrl         String
  price            Int
  purchaseOption   String         @db.VarChar(100)
  status           Int            @default(0)
  productCount     Int
  description      String
  invoiceDeadline  DateTime?      @db.Date
  invoiceNumber    String?        @db.VarChar(100)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  salesPost        SalesPost      @relation(fields: [salesPostId], references: [id])
  salesPostId      Int
  suggester        User           @relation(fields: [suggesterId], references: [id])
  suggesterId      Int
  shippingOption   ShippingOption @relation(fields: [shippingOptionId], references: [id])
  shippingOptionId Int
}
